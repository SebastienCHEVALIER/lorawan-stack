// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _qrcodegenerator_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on QRCodeFormat with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QRCodeFormat) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = QRCodeFormatFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "name":

			if utf8.RuneCountInString(m.GetName()) > 100 {
				return QRCodeFormatValidationError{
					field:  "name",
					reason: "value length must be at most 100 runes",
				}
			}

		case "description":

			if utf8.RuneCountInString(m.GetDescription()) > 200 {
				return QRCodeFormatValidationError{
					field:  "description",
					reason: "value length must be at most 200 runes",
				}
			}

		case "field_mask":

			if v, ok := interface{}(&m.FieldMask).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return QRCodeFormatValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return QRCodeFormatValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// QRCodeFormatValidationError is the validation error returned by
// QRCodeFormat.ValidateFields if the designated constraints aren't met.
type QRCodeFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QRCodeFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QRCodeFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QRCodeFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QRCodeFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QRCodeFormatValidationError) ErrorName() string { return "QRCodeFormatValidationError" }

// Error satisfies the builtin error interface
func (e QRCodeFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQRCodeFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QRCodeFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QRCodeFormatValidationError{}

// ValidateFields checks the field values on QRCodeFormats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QRCodeFormats) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = QRCodeFormatsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "formats":

			for key, val := range m.GetFormats() {
				_ = val

				if utf8.RuneCountInString(key) > 36 {
					return QRCodeFormatsValidationError{
						field:  fmt.Sprintf("formats[%v]", key),
						reason: "value length must be at most 36 runes",
					}
				}

				if !_QRCodeFormats_Formats_Pattern.MatchString(key) {
					return QRCodeFormatsValidationError{
						field:  fmt.Sprintf("formats[%v]", key),
						reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
					}
				}

				if v, ok := interface{}(val).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return QRCodeFormatsValidationError{
							field:  fmt.Sprintf("formats[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return QRCodeFormatsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// QRCodeFormatsValidationError is the validation error returned by
// QRCodeFormats.ValidateFields if the designated constraints aren't met.
type QRCodeFormatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QRCodeFormatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QRCodeFormatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QRCodeFormatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QRCodeFormatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QRCodeFormatsValidationError) ErrorName() string { return "QRCodeFormatsValidationError" }

// Error satisfies the builtin error interface
func (e QRCodeFormatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQRCodeFormats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QRCodeFormatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QRCodeFormatsValidationError{}

var _QRCodeFormats_Formats_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// ValidateFields checks the field values on GetQRCodeFormatRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetQRCodeFormatRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GetQRCodeFormatRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "format_id":

			if utf8.RuneCountInString(m.GetFormatID()) > 36 {
				return GetQRCodeFormatRequestValidationError{
					field:  "format_id",
					reason: "value length must be at most 36 runes",
				}
			}

			if !_GetQRCodeFormatRequest_FormatID_Pattern.MatchString(m.GetFormatID()) {
				return GetQRCodeFormatRequestValidationError{
					field:  "format_id",
					reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
				}
			}

		default:
			return GetQRCodeFormatRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GetQRCodeFormatRequestValidationError is the validation error returned by
// GetQRCodeFormatRequest.ValidateFields if the designated constraints aren't met.
type GetQRCodeFormatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQRCodeFormatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQRCodeFormatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQRCodeFormatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQRCodeFormatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQRCodeFormatRequestValidationError) ErrorName() string {
	return "GetQRCodeFormatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQRCodeFormatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQRCodeFormatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQRCodeFormatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQRCodeFormatRequestValidationError{}

var _GetQRCodeFormatRequest_FormatID_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// ValidateFields checks the field values on GenerateEndDeviceQRCodeTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GenerateEndDeviceQRCodeTextRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GenerateEndDeviceQRCodeTextRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "format_id":

			if utf8.RuneCountInString(m.GetFormatID()) > 36 {
				return GenerateEndDeviceQRCodeTextRequestValidationError{
					field:  "format_id",
					reason: "value length must be at most 36 runes",
				}
			}

			if !_GenerateEndDeviceQRCodeTextRequest_FormatID_Pattern.MatchString(m.GetFormatID()) {
				return GenerateEndDeviceQRCodeTextRequestValidationError{
					field:  "format_id",
					reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
				}
			}

		case "end_device":

			if v, ok := interface{}(&m.EndDevice).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GenerateEndDeviceQRCodeTextRequestValidationError{
						field:  "end_device",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return GenerateEndDeviceQRCodeTextRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GenerateEndDeviceQRCodeTextRequestValidationError is the validation error
// returned by GenerateEndDeviceQRCodeTextRequest.ValidateFields if the
// designated constraints aren't met.
type GenerateEndDeviceQRCodeTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEndDeviceQRCodeTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEndDeviceQRCodeTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEndDeviceQRCodeTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEndDeviceQRCodeTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEndDeviceQRCodeTextRequestValidationError) ErrorName() string {
	return "GenerateEndDeviceQRCodeTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateEndDeviceQRCodeTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEndDeviceQRCodeTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEndDeviceQRCodeTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEndDeviceQRCodeTextRequestValidationError{}

var _GenerateEndDeviceQRCodeTextRequest_FormatID_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// ValidateFields checks the field values on GenerateQRCodeTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GenerateQRCodeTextResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GenerateQRCodeTextResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "text":
			// no validation rules for Text
		default:
			return GenerateQRCodeTextResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GenerateQRCodeTextResponseValidationError is the validation error returned
// by GenerateQRCodeTextResponse.ValidateFields if the designated constraints
// aren't met.
type GenerateQRCodeTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateQRCodeTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateQRCodeTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateQRCodeTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateQRCodeTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateQRCodeTextResponseValidationError) ErrorName() string {
	return "GenerateQRCodeTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateQRCodeTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateQRCodeTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateQRCodeTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateQRCodeTextResponseValidationError{}

// ValidateFields checks the field values on
// GenerateEndDeviceQRCodeImageRequest with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *GenerateEndDeviceQRCodeImageRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GenerateEndDeviceQRCodeImageRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "format_id":

			if utf8.RuneCountInString(m.GetFormatID()) > 36 {
				return GenerateEndDeviceQRCodeImageRequestValidationError{
					field:  "format_id",
					reason: "value length must be at most 36 runes",
				}
			}

			if !_GenerateEndDeviceQRCodeImageRequest_FormatID_Pattern.MatchString(m.GetFormatID()) {
				return GenerateEndDeviceQRCodeImageRequestValidationError{
					field:  "format_id",
					reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
				}
			}

		case "end_device":

			if v, ok := interface{}(&m.EndDevice).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GenerateEndDeviceQRCodeImageRequestValidationError{
						field:  "end_device",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "image_size":

			if m.GetImageSize() > 1000 {
				return GenerateEndDeviceQRCodeImageRequestValidationError{
					field:  "image_size",
					reason: "value must be less than or equal to 1000",
				}
			}

		default:
			return GenerateEndDeviceQRCodeImageRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GenerateEndDeviceQRCodeImageRequestValidationError is the validation error
// returned by GenerateEndDeviceQRCodeImageRequest.ValidateFields if the
// designated constraints aren't met.
type GenerateEndDeviceQRCodeImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEndDeviceQRCodeImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEndDeviceQRCodeImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEndDeviceQRCodeImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEndDeviceQRCodeImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEndDeviceQRCodeImageRequestValidationError) ErrorName() string {
	return "GenerateEndDeviceQRCodeImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateEndDeviceQRCodeImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEndDeviceQRCodeImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEndDeviceQRCodeImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEndDeviceQRCodeImageRequestValidationError{}

var _GenerateEndDeviceQRCodeImageRequest_FormatID_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// ValidateFields checks the field values on GenerateQRCodeImageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GenerateQRCodeImageResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GenerateQRCodeImageResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "text":
			// no validation rules for Text
		case "image":
			// no validation rules for Image
		default:
			return GenerateQRCodeImageResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GenerateQRCodeImageResponseValidationError is the validation error returned
// by GenerateQRCodeImageResponse.ValidateFields if the designated constraints
// aren't met.
type GenerateQRCodeImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateQRCodeImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateQRCodeImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateQRCodeImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateQRCodeImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateQRCodeImageResponseValidationError) ErrorName() string {
	return "GenerateQRCodeImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateQRCodeImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateQRCodeImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateQRCodeImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateQRCodeImageResponseValidationError{}
